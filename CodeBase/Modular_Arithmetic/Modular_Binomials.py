# -*- coding: utf-8 -*-
"""
Giải pháp cho bài "Modular Binomials" trên CryptoHack

Đây là một bài toán đại số, yêu cầu biến đổi các phương trình đồng dư để tìm ra các thừa số nguyên tố p và q của N.

### Phân tích bài toán

Ta được cho:
1. N = p * q
2. c1 ≡ (2p + 3q)^e1 (mod N)
3. c2 ≡ (5p + 7q)^e2 (mod N)

Chìa khóa là xét các phương trình trên theo `mod p` và `mod q`.

#### a. Xét theo `mod p`
Khi `mod p`, mọi số hạng chứa `p` đều bằng 0.
- `c1 ≡ (3q)^e1 (mod p)`
- `c2 ≡ (7q)^e2 (mod p)`

Lũy thừa chéo 2 vế để có cùng số mũ của q:
- `c1^e2 ≡ (3q)^(e1*e2) (mod p)`
- `c2^e1 ≡ (7q)^(e1*e2) (mod p)`

Khử `q` bằng cách nhân chéo, ta có:
`c1^e2 * 7^(e1*e2) ≡ c2^e1 * 3^(e1*e2) (mod p)`

Điều này có nghĩa là `(c1^e2 * 7^(e1*e2) - c2^e1 * 3^(e1*e2))` là một bội số của `p`.

#### b. Xét theo `mod q`
Khi `mod q`, mọi số hạng chứa `q` đều bằng 0.
- `c1 ≡ (2p)^e1 (mod q)`
- `c2 ≡ (5p)^e2 (mod q)`

Làm tương tự như trên, ta có:
`c1^e2 * 5^(e1*e2) ≡ c2^e1 * 2^(e1*e2) (mod q)`

Điều này có nghĩa là `(c1^e2 * 5^(e1*e2) - c2^e1 * 2^(e1*e2))` là một bội số của `q`.

### Kế hoạch giải

1.  Tính `K = (c1^e2 * 7^(e1*e2) - c2^e1 * 3^(e1*e2)) mod N`.
    `p` sẽ là ước chung lớn nhất của `K` và `N`.
    `p = gcd(K, N)`.

2.  Tính `L = (c1^e2 * 5^(e1*e2) - c2^e1 * 2^(e1*e2)) mod N`.
    `q` sẽ là ước chung lớn nhất của `L` và `N`.
    `q = gcd(L, N)`.

3.  Kết quả là `p` và `q`. Flag là `crypto{p,q}`.
"""

import math

# Dữ liệu từ file
N = 14905562257842714057932724129575002825405393502650869767115942606408600343380327866258982402447992564988466588305174271674657844352454543958847568190372446723549627752274442789184236490768272313187410077124234699854724907039770193680822495470532218905083459730998003622926152590597710213127952141056029516116785229504645179830037937222022291571738973603920664929150436463632305664687903244972880062028301085749434688159905768052041207513149370212313943117665914802379158613359049957688563885391972151218676545972118494969247440489763431359679770422939441710783575668679693678435669541781490217731619224470152467768073
e1 = 12886657667389660800780796462970504910193928992888518978200029826975978624718627799215564700096007849924866627154987365059524315097631111242449314835868137
e2 = 12110586673991788415780355139635579057920926864887110308343229256046868242179445444897790171351302575188607117081580121488253540215781625598048021161675697
c1 = 14010729418703228234352465883041270611113735889838753433295478495763409056136734155612156934673988344882629541204985909650433819205298939877837314145082403528055884752079219150739849992921393509593620449489882380176216648401057401569934043087087362272303101549800941212057354903559653373299153430753882035233354304783275982332995766778499425529570008008029401325668301144188970480975565215953953985078281395545902102245755862663621187438677596628109967066418993851632543137353041712721919291521767262678140115188735994447949166616101182806820741928292882642234238450207472914232596747755261325098225968268926580993051
c2 = 14386997138637978860748278986945098648507142864584111124202580365103793165811666987664851210230009375267398957979494066880296418013345006977654742303441030008490816239306394492168516278328851513359596253775965916326353050138738183351643338294802012193721879700283088378587949921991198231956871429805847767716137817313612304833733918657887480468724409753522369325138502059408241232155633806496752350562284794715321835226991147547651155287812485862794935695241612676255374480132722940682140395725089329445356434489384831036205387293760789976615210310436732813848937666608611803196199865435145094486231635966885932646519


def solve():
    E = e1 * e2

    # Tính K
    # K = (c1^e2 * 7^E - c2^e1 * 3^E) mod N
    term1_K = pow(c1, e2, N)
    term2_K = pow(7, E, N)
    term3_K = pow(c2, e1, N)
    term4_K = pow(3, E, N)
    K = (term1_K * term2_K - term3_K * term4_K) % N

    # Tính L
    # L = (c1^e2 * 5^E - c2^e1 * 2^E) mod N
    term1_L = pow(c1, e2, N)
    term2_L = pow(5, E, N)
    term3_L = pow(c2, e1, N)
    term4_L = pow(2, E, N)
    L = (term1_L * term2_L - term3_L * term4_L) % N

    # Tìm p và q bằng GCD
    p = math.gcd(K, N)
    q = math.gcd(L, N)

    # Kiểm tra kết quả
    if p * q == N:
        print("Found p and q successfully!")
        p_final = min(p, q)
        q_final = max(p, q)
        print(f"p = {p_final}")
        print(f"q = {q_final}")
        print(f"Flag: crypto{{{p_final},{q_final}}}")
    else:
        print("Could not find p and q. Maybe p and q are swapped.")
        # Thử tráo đổi
        p, q = q, p
        if p * q == N:
            print("Found p and q successfully (after swapping)!")
            p_final = min(p, q)
            q_final = max(p, q)
            print(f"p = {p_final}")
            print(f"q = {q_final}")
            print(f"Flag: crypto{{{p_final},{q_final}}}")
        else:
            print("Failed to solve.")

if __name__ == "__main__":
    solve()